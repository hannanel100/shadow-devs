// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  MENTOR
  MENTEE
  ADMIN
}

// model User {
//   id        Int      @id @default(autoincrement())
//   image     String   @unique
//   name      String
//   location  String
//   bio       String?
//   role      Role?    @relation(fields: [roleId], references: [id])
//   roleId    Int?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Mentor {
  id       Int      @id @default(autoincrement())
  image    String
  location String
  name     String
  bio      String?
  tags     String[]
  rating   Float
  mentees  Mentee[]
}

model Mentee {
  id       Int      @id @default(autoincrement())
  image    String   @unique
  location String
  name     String
  bio      String?
  tags     String[]
  mentor   Mentor?  @relation(fields: [mentorId], references: [id])
  mentorId Int?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
